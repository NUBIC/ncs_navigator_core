- title "Development Workflow for Participant"

%h3
  = @participant.person.to_s

.page_section
  %p
    %b
      Current Participant State
    %br
      = @participant.state.titleize
  %p
    %b
      Next State
    .form
      = form_for @participant, :url => development_update_state_participant_path(@participant) do |f| 
        - if @participant.low_intensity?
          - if @participant.pending?
            Registered
            = hidden_field_tag :new_state, "registered"
          - elsif @participant.registered?
            In Pregnancy Probability Group
            = hidden_field_tag :new_state, "in_pregnancy_probability_group"
          - elsif @participant.in_pregnancy_probability_group?
            Pregnant
            - unless @participant.known_to_be_pregnant?
              .developer_note
                Make sure you update the PPG Status to PPG 1 if you move to Pregnant State
            = hidden_field_tag :new_state, "pregnant_and_consented"
          - elsif @participant.pregnant_and_consented?
            Move to High Intensity Arm
            = hidden_field_tag :new_state, "moved_to_high_intensity_arm"
        - else
          - if @participant.in_high_intensity_arm?
            Pre-Pregnancy
            = hidden_field_tag :new_state, "pre_pregnancy"
          - elsif @participant.pre_pregnancy?
            Pregnancy One
            = hidden_field_tag :new_state, "pregnancy_one"
          - else
            N/A
        %br
        - if !@participant.can_register_with_psc?(psc) && !@participant.pregnancy_one?
          = f.submit "Move to next state", :disable_with => 'Updating...'
    - if @participant.can_register_with_psc?(psc)
      = form_for(@participant, :url => register_with_psc_participant_path(@participant, :redirect_to => "#{request.path}"), :html => {:class => "register_participant_with_psc"}) do |f| 
        = render "shared/full_error_messages", :object => f.object
        %p
          = f.submit "Register with PSC"


.page_section

  .intensity
    %b
      Hi/Lo
    %br
      = @participant.high_intensity? ? "High Intensity Participant" : "Low Intensity Participant"  

  .pregnancy_probability_group
    %b
      Pregnancy Probability Group
    %br
      = @participant.ppg_status
    %br
      = link_to "Update PPG Status", edit_ppg_status_participant_path(@participant), :class => "edit_link icon_link"
  .upcoming_events
    %b
      Upcoming Events
    %br  
    - if @participant.upcoming_events.blank?
      No Upcoming Events
    - else
      = @participant.upcoming_events.to_sentence
      %br
      - @participant.upcoming_events.each do |event|
        %b
          = "Instruments for #{event}"
        %br
        - instruments = InstrumentEventMap.instruments_for(event)
        - if instruments.blank?
          There are no Instruments for 
          = event
        - else
          - instruments.each do |ins|
            - if survey = Survey.most_recent_for_title(ins)
                = "#{ins}"
            - else
              = "#{ins}"
            %br

.page_section
  .psc_registration
    %b
      PSC
    %br
    - if @participant.can_register_with_psc?(psc)
      Participant needs to be registered in PSC
    - else
      Participant is registered in PSC
      
  = render "schedule", :participant => @participant if psc.is_registered?(@participant)
  
  %b
  - if !@participant.can_register_with_psc?(psc)
    - if next_event = @participant.next_scheduled_event
      .schedule_next_event
        %b
          Schedule Next Event      
          = form_for(@participant, :url => schedule_next_event_with_psc_participant_path(@participant, :redirect_to => "#{request.path}"), :html => {:class => "schedule_next_event_with_psc"}) do |f| 
            = render "shared/full_error_messages", :object => f.object
            %p
              = text_field_tag :date, next_event.date.to_s, :class => 'datepicker'
            %p
              = f.submit "Schedule #{next_event.event}"
