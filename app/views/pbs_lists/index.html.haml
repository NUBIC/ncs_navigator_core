- title "PBS Lists"

.mdes_table_definition
  = render 'documentation/pbs_list'

.page_section.search
  = search_form_for(@q, :html => {:autocomplete => "off"}) do |f|
    %p
      = f.label :provider_name_practice_cont, "Practice Name"
      = f.text_field :provider_name_practice_cont
    %p
      = f.label :in_sample_code_eq, "In Sample"
      = f.select(:in_sample_code_eq, NcsCode.ncs_code_lookup(:in_sample_code).sort_by { |a| a[0] }, { :include_blank => "-- In Sample? --" })
    %p
      = f.label :in_out_frame_code_eq, "In Frame"
      = f.select(:in_out_frame_code_eq, NcsCode.ncs_code_lookup(:in_out_frame_code).sort_by { |a| a[0] }, { :include_blank => "-- In Frame? --" })
    = f.submit "Search"


.page_section.pbs_list
  - if @pbs_lists.empty?
    #no_records
      No PBS List records were found.
  - else
    .records_header
      .page_entries_info
        = raw page_entries_info @pbs_lists
    %table.records
      %tr
        %th
          = sort_link @q, "provider_name_practice", "Practice Name"
        %th
          = sort_link @q, "in_sample_code", "In Sample?"
        %th
          = sort_link @q, "in_out_frame_code", "In Frame?"
        %th
          Last Contact
        %th
          Provider Recruitment

      - @pbs_lists.each do |pbs|
        - provider = pbs.provider
        %tr{ :class => cycle('even_record', 'odd_record') }
          - name = blank_safe(provider.name_practice)
          %td{ :title => "#{name} - #{provider.address.to_s}" }
            = link_to name, edit_provider_path(provider), :class => "edit_link icon_link"
          %td
            = pbs.in_sample
          %td
            = pbs.in_out_frame
          %td
            - unless provider.contacts.blank?
              - txt = "#{provider.contacts.first.contact_date} #{provider.contacts.first.contact_start_time}"
              = link_to txt, contact_log_provider_path(provider), :class => "list_link icon_link"
          %td
            = provider_recruitment_link(pbs) unless pbs.recruitment_ended?
            = link_to 'Refused', refused_provider_path(pbs.provider), :class => 'refused_link icon_link' if pbs.refused_to_participate?
  .links
    = link_to 'Add New PBS List record', new_pbs_list_path, :class => "add_link icon_link"
    %br
    = link_to "Upload PBS List", upload_pbs_lists_path, :class => "import_link icon_link"

  = will_paginate @pbs_lists


