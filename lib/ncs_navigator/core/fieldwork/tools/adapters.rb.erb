# -*- coding: utf-8 -*-

require 'bigdecimal'
require 'date'
require 'forwardable'
require 'ncs_navigator/core'

##
# These adapters were bootstrapped from the fieldwork JSON schema.
#
# Schema revision: <%= rev %>
module NcsNavigator::Core::Fieldwork::Adapters
  def adapt_hash(type, o)
    case type
    <% classes.each do |k| %>
    when :<%= k.underscore %>; <%= k %>HashAdapter.new(o)
    <% end %>
    end
  end

  def adapt_model(m)
    case m
    <% classes.each do |k| %>
    when <%= k %>; <%= k %>ModelAdapter.new(m)
    <% end %>
    end
  end

  module ActiveRecordTypeCoercion
    def date(x)
      case x
      when Date; x
      when NilClass; x
      else
        begin
          Date.parse(x)
        rescue ArgumentError
        end
      end
    end

    def decimal(x)
      case x
      when BigDecimal; x
      when NilClass; x
      else BigDecimal.new(x)
      end
    end
  end

  class Adapter < Struct.new(:target, :ancestors)
    def initialize(*args)
      super

      self.ancestors = {}
    end

    def [](a)
      send(a)
    end

    def []=(a, v)
      send("#{a}=", v)
    end
  end

  <% classes.each do |k| %>
  class <%= k %>ModelAdapter < Adapter
    extend Forwardable
    extend ActiveModel::Naming
    include ActiveModel::MassAssignmentSecurity

    <% if attribute_map[k] %>
    <% attribute_map[k].each do |attr, to| %>
    <% if to.is_a?(Hash) %>
    <% if to['reader'] %>
    def <%= attr %>
      <%= to['reader'] %>
    end
    <% end %>
    <% if to['writer'] %>
    def <%= attr %>=(val)
      <%= to['writer'] %>
    end

    attr_accessible :<%= attr %>
    <% end %>
    <% else %>
    def <%= attr %>
      target.<%= to %>
    end

    def <%= attr %>=(val)
      target.<%= to %> = val
    end

    attr_accessible :<%= attr %>
    <% end %>
    <% end %>
    <% end %>

    def to_model
      target
    end

    def as_json(options = nil)
      {}.tap do |h|
        self.class.accessible_attributes.each do |k|
          h[k] = send(k)
        end
      end
    end

    def_delegators :to_model,
      :changed?,
      :destroyed?,
      :errors,
      :new_record?,
      :persisted?,
      :public_id,
      :save,
      :valid?

    def patch(target)
      sanitize_for_mass_assignment(target).each { |k, v| send("#{k}=", v) }
    end

    def merge_atomically?
      false
    end

    def ==(other)
      to_model == other.to_model
    end
  end

  class <%= k %>HashAdapter < Adapter
    include NcsNavigator::Core::Fieldwork::Adapters
    include ActiveRecordTypeCoercion

    <% attributes[k].each do |attr, metadata| %>
    def <%= attr %>
      <%= coercion_for(metadata) %>(target[%q{<%= attr %>}])
    end

    def <%= attr %>=(val)
      target[%q{<%= attr %>}] = val
    end
    <% end %>

    def to_hash
      target
    end

    def to_model
      adapt_model(<%= k %>.new).tap do |m|
        m.ancestors = ancestors
        m.patch(target)
      end
    end

    def ==(other)
      to_hash == other.to_hash
    end
  end
<% end %>
end
