require 'ncs_navigator/warehouse'
require 'ncs_navigator/warehouse/data_mapper'
require 'json'

config_file = ARGV[0]
unless config_file && File.exist?(config_file)
  puts "Cannot read warehouse configuration file #{config_file.inspect}"
  exit(4)
end

config = NcsNavigator::Warehouse::Configuration.from_file(ARGV[0])
config.soft_validations = ARGV.include?('--soft_validations')
config.shell.say "Initializing Warehouse API..."
ts = NcsNavigator::Warehouse::TransformStatus.new
transformer = NcsNavigator::Warehouse::Transformers::EnumTransformer.new(
  config, NcsNavigator::Core::Warehouse::InstrumentEnumerator.new(config),
  :filters => [
    NcsNavigator::Warehouse::Filters::ApplyGlobalValuesFilter.new(config)
  ]
)

NcsNavigator::Warehouse::DatabaseInitializer.new(config).set_up_repository(:working)

::DataMapper.repository(:mdes_warehouse_working) do |repo|
  # redefine identity map as a no-op so it doesn't cache
  # anything. TODO: provide a patch to DataMapper that makes
  # something like this an option.
  def repo.identity_map(model); {}; end

  transformer.transform(ts)
end

# Output to conform to SubprocessTransformer stdout protocol
ts.transform_errors.each do |error|
  line = error.to_json
  puts line unless line.gsub(/[{}\s]/, '').empty?
end
puts ts.record_count
