require 'ncs_navigator/warehouse'
require 'ncs_navigator/warehouse/data_mapper'
require 'json'

config = NcsNavigator::Warehouse::Configuration.from_file(ARGV[0])
shell.say "Initializing Warehouse API..."
ts = NcsNavigator::Warehouse::TransformStatus.new
transformer = NcsNavigator::Warehouse::Transformers::EnumTransformer.new(
  config, NcsNavigator::Core::Warehouse::InstrumentEnumerator.new(config)
)

NcsNavigator::Warehouse::DatabaseInitializer.new(config).set_up_repository(:working)

::DataMapper.repository(:mdes_warehouse_working) do |repo|
  # redefine identity map as a no-op so it doesn't cache
  # anything. TODO: provide a patch to DataMapper that makes
  # something like this an option.
  def repo.identity_map(model); {}; end

  transformer.transform(ts)
end

def json_line(te)
  %w(message record_id model_class).inject({}) { |o, k|
    o[k] = te.send(k) if te.send(k); o
  }.to_json.gsub(/\n/, ' ')
end

# Output to conform to SubprocessTransformer stdout protocol
ts.transform_errors.each do |error|
  line = json_line(error)
  puts line unless line.gsub(/[{}\s]/, '').empty?
end
puts ts.record_count
